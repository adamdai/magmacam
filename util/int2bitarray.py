import matplotlib.pyplot as plt
import numpy as np
from matplotlib import cm
import csv
import os
import pandas as pd

# Takes an array of 16, 16-bit ints representing rows of a 16x16 binary image 
# and displays a visual representation
# if loading from csv expects raw analyzer output data from the rescale.UART channel

# MNIST raw data
'''
0.) [0, 0, 0, 896, 1984, 3680, 7216, 6204, 14456, 14448, 8160, 3840, 0, 0, 0, 0]
1.) [0, 0, 0, 0, 0, 0, 120, 960, 7680, 12288, 0, 0, 0, 0, 0, 0]
2.) [0, 1024, 1024, 1024, 1024, 1784, 1804, 1548, 3592, 3592, 7680, 7168, 0, 0, 0, 0]
3.) [0, 0, 0, 0, 0, 3696, 7152, 6616, 4120, 12312, 12312, 8192, 0, 0, 0, 0]
4.) [0, 0, 0, 0, 0, 9208, 16128, 256, 256, 256, 256, 480, 0, 0, 0, 0]
5.) [0, 0, 16, 24, 1040, 3600, 6928, 12688, 8336, 24752, 16496, 8288, 64, 0, 0, 0]
6.) [0, 0, 0, 0, 0, 1792, 3846, 2332, 8056, 4064, 0, 0, 0, 0, 0, 0]
7.) [0, 0, 0, 0, 64, 480, 1840, 3632, 6192, 28720, 16416, 32, 0, 0, 0, 0]
8.) [0, 0, 0, 0, 56, 14456, 16344, 25496, 25488, 16336, 6384, 112, 0, 0, 0, 0]
9.) [0, 0, 0, 0, 0, 15840, 32752, 16176, 816, 1008, 480, 0, 0, 0, 0, 0]
'''

# transformed row format data
'''
0.) [0, 0, 128, 384, 960, 2016, 1840, 1048, 3096, 3128, 3184, 4064, 1984, 768, 0, 0]
1.) [0, 0, 0, 64, 64, 64, 192, 128, 128, 384, 256, 256, 768, 512, 0, 0]
2.) [0, 0, 192, 992, 32, 32, 32, 32, 64, 2016, 4094, 3840, 3072, 0, 0, 0]
3.) [0, 0, 0, 1920, 2016, 96, 224, 192, 192, 96, 32, 224, 1984, 3584, 0, 0]
4.) [0, 0, 0, 32, 32, 2080, 2080, 2080, 4064, 96, 64, 64, 64, 96, 0, 0]
5.) [0, 0, 0, 8, 2044, 3584, 7168, 896, 192, 96, 48, 96, 192, 2944, 1536, 0]
6.) [0, 64, 192, 384, 384, 768, 768, 512, 992, 864, 864, 960, 256, 0, 0, 0]
7.) [0, 0, 0, 0, 960, 4064, 48, 32, 96, 192, 192, 384, 768, 512, 1536, 0]
8.) [0, 0, 0, 240, 4080, 3120, 3680, 1984, 960, 960, 576, 1632, 1632, 992, 384, 0]
9.) [0, 0, 0, 0, 960, 2016, 1632, 1632, 2016, 960, 224, 224, 224, 224, 64, 0]
'''

# example arducam captures
'''
0.) 
1.) [0, 0, 64, 64, 64, 64, 64, 64, 64, 64, 64, 96, 224, 32992, 32832, 32768]
2.) 
3.) [0, 896, 1600, 1024, 64, 128, 896, 960, 96, 32, 32, 1632, 960, 0, 0, 0]
4.) [0, 0, 0, 0, 128, 4224, 4224, 4224, 8064, 384, 256, 256, 256, 384, 49536, 32769]
5.) 
6.) 
7.) 
8.) [0, 0, 0, 0, 0, 384, 576, 576, 576, 960, 896, 1216, 1088, 3136, 3264, 4032]
    [1920, 1152, 2112, 1088, 1152, 1920, 1920, 3200, 2240, 2112, 2240, 3456, 3968, 512, 0, 0]
9.) 
'''

# --------------------------- STATIC LOAD --------------------------------#

# img_list = [0, 0, 0, 32, 32, 2080, 2080, 2080, 4064, 96, 64, 64, 64, 96, 0, 0]

# --------------------------- LOAD FROM FILE ---------------------------- #

img_size = 16

img_list = []

df = pd.read_csv(r"~/Documents/analyzerdata/test_bits.csv", usecols=[1])
for val in df.values[1:img_size+1]:
    img_list.append(int(val))

print(img_list)

# --------------------------- CREATE BIT ARRAY---------------------------- #

bmp = []
f = '{0:0'+str(img_size)+'b}'
for n in img_list:
    row = [1 if digit=='1' else 0 for digit in f.format(n)]
    bmp.append(row)

arr = np.asarray(bmp)
transformed = np.flip(np.rot90(arr), 1)

# display original array
print(arr)
plt.imshow(arr, cmap=cm.binary)
plt.show()

# convert other form
new_list = []
for row in transformed:
    print(row)
    out = 0
    for bit in row:
        out = (out << 1) | bit
    new_list.append(out)

print(new_list)

